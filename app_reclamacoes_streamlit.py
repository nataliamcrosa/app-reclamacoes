import os
import streamlit as st
import pandas as pd
import json

st.set_page_config(layout="wide")
st.title("üìä An√°lise de Reclama√ß√µes por Unidade")

# üìÅ Carregar os dados da planilha (suporta 1 ou 2 arquivos para localiza√ß√µes diferentes)
@st.cache_data
def carregar_dados():
    if os.path.exists("Reclamacoes_2025_Traduzido_Portugal.xlsx") and os.path.exists("Reclamacoes_2025_Traduzido_Londres.xlsx"):
        # Carregar dados de Portugal
        excel_pt = pd.ExcelFile("Reclamacoes_2025_Traduzido_Portugal.xlsx")
        df_pt = pd.concat([excel_pt.parse(mes).assign(M√™s=mes) for mes in excel_pt.sheet_names], ignore_index=True)
        df_pt["Localiza√ß√£o"] = "Portugal"
        # Carregar dados de Londres
        excel_ld = pd.ExcelFile("Reclamacoes_2025_Traduzido_Londres.xlsx")
        df_ld = pd.concat([excel_ld.parse(mes).assign(M√™s=mes) for mes in excel_ld.sheet_names], ignore_index=True)
        df_ld["Localiza√ß√£o"] = "Londres"
        df = pd.concat([df_pt, df_ld], ignore_index=True)
    else:
        excel = pd.ExcelFile("Reclamacoes_2025_Traduzido.xlsx")
        df = pd.concat([excel.parse(mes).assign(M√™s=mes) for mes in excel.sheet_names], ignore_index=True)
        df["Localiza√ß√£o"] = "N/A"
    df["Review date"] = pd.to_datetime(df["Review date"], errors='coerce')
    df["Negative review (PT)"] = df["Negative review (PT)"].fillna("").astype(str).str.lower()
    return df

df_all = carregar_dados()

# üìå Dicion√°rio de temas atualizado
temas_keywords = {
    "Limpeza": ["sujo", "empoeirada", "sem papel", "sujeira", "limpo", "limpeza", "poeira", "imundo", "len√ß√≥is", "toalhas", "cheiro ruim", "odor", "quarto sujo", "cheiro nojento"],
    "Acesso/Check-in": ["porta", "check-in estava uma bagun√ßa", "n√£o acessei o lugar", "chaves", "n√£o conseguimos entrar.", "trancado", "n√£o consegui entrar", "c√≥digo n√£o funcionou", "problema no acesso", "sem chave", "problema com o c√≥digo", "acesso dif√≠cil", "demora no check-in"],
    "Itens faltando": ["sem papel higi√™nico", "exceto garfos", "faltando", "n√£o tinha", "sem toalha", "sem sabonete", "sem cobertor", "sem travesseiro", "sem utens√≠lios", "sem itens b√°sicos", "poucos pratos", "faltavam copos"],
    "Atendimento": ["atendimento ruim", "n√£o respondam √†s mensagens", "n√£o respondeu", "sem resposta", "demoraram para ajudar", "ningu√©m apareceu", "pessoal in√∫til", "equipe despreparada", "falta de suporte", "comunica√ß√£o ruim", "resposta demorada", "n√£o profissional"],
    "Manuten√ß√£o/Estrutura": ["remoto", "aquecedor", "inc√™ndio", "t√≠nhamos √°gua", "√°gua quente", "chuveiro quebrado", "chuveiro", "caixa el√©trica", "alarme", "vazamento", "l√¢mpada queimada", "teto rachado", "paredes descascando", "radiador", "aquecimento n√£o funcionou", "equipamento com defeito", "sem luz", "tomada n√£o funciona", "problema estrutural", "estragado", "mofo", "infiltra√ß√£o"],
    "Conforto": ["colch√£o ruim", "frio", "cama desconfort√°vel", "muito frio", "muito calor", "barulhento", "sem isolamento", "muito pequeno", "sem ventila√ß√£o", "ambiente gelado", "n√£o tinha aquecedor"],
    "Internet": ["sem wi-fi", "internet ruim", "internet", "wi-fi n√£o funcionou", "sem sinal", "conex√£o fraca", "internet lenta", "wi-fi caindo"],
    "Barulho": ["barulho", "ru√≠do", "som alto", "vizinho barulhento", "festa", "gritaria", "incomodado com o barulho"],
    "An√∫ncio incorreto": ["n√£o era como nas fotos", "leva uma hora ", "an√∫ncio enganoso", "fotos diferentes", "expectativa diferente", "propaganda enganosa", "n√£o era o que esperava"],
    "Avalia√ß√£o gen√©rica": ["p√©ssima experi√™ncia", "horr√≠vel", "n√£o recomendo", "decep√ß√£o", "terr√≠vel", "pior estadia", "nada"]
}

def identificar_tema(texto):
    encontrados = [tema for tema, palavras in temas_keywords.items() if any(p in texto for p in palavras)]
    return ", ".join(encontrados) if encontrados else "Outro"

df_all["Tema identificado"] = df_all["Negative review (PT)"].apply(identificar_tema)

# üîç Filtros Gerais
meses = sorted(df_all["M√™s"].unique())
meses_selecionados = st.multiselect("Selecionar m√™s(es)", meses, default=meses)

# Filtro por localiza√ß√£o, se aplic√°vel
if "Localiza√ß√£o" in df_all.columns and df_all["Localiza√ß√£o"].nunique() > 1:
    localizacoes = sorted(df_all["Localiza√ß√£o"].unique())
    localizacao_selecionada = st.selectbox("Selecionar localiza√ß√£o", ["Todas"] + localizacoes)
    if localizacao_selecionada != "Todas":
        df_all = df_all[df_all["Localiza√ß√£o"] == localizacao_selecionada]

# Filtro por Unidade (opcional)
unidades = sorted(df_all[df_all["M√™s"].isin(meses_selecionados)]["Unit"].unique())
unidades_selecionadas = st.multiselect("Selecionar unidade(s)", unidades)
if unidades_selecionadas:
    df_filtrado = df_all[(df_all["M√™s"].isin(meses_selecionados)) & (df_all["Unit"].isin(unidades_selecionadas))]
else:
    df_filtrado = df_all[df_all["M√™s"].isin(meses_selecionados)]

# Remover registros com coment√°rios em branco
df_filtrado = df_filtrado[df_filtrado["Negative review (PT)"].str.strip() != ""]

st.subheader("üìã Reclama√ß√µes detalhadas")
st.dataframe(df_filtrado[["Review date", "Unit", "Localiza√ß√£o", "Tema identificado", "Negative review (PT)", "Review score"]].sort_values("Review date"), use_container_width=True)

# üìò SUGEST√ïES PADR√ÉO
with open("sugestoes_padrao_final.json", "r", encoding="utf-8") as f:
    sugestoes_padrao = json.load(f)

# üìÑ RELAT√ìRIO AUTOM√ÅTICO
st.markdown("---")
st.header("üìÑ Relat√≥rio autom√°tico da unidade/total")

if st.button("Gerar relat√≥rio"):
    # Filtrar registros para o relat√≥rio: desconsiderar notas 8, 9 ou 10 e coment√°rios vazios
    df_relatorio = df_filtrado[~df_filtrado["Review score"].isin([8, 9, 10])]
    df_relatorio = df_relatorio[df_relatorio["Negative review (PT)"].str.strip() != ""]
    
    temas_splitados = df_relatorio["Tema identificado"].str.split(", ")
    temas_explodido = df_relatorio.loc[temas_splitados.index.repeat(temas_splitados.str.len())].copy()
    temas_explodido["Tema"] = [t for sub in temas_splitados for t in sub]
    contagem_temas = temas_explodido["Tema"].value_counts()

    top_3 = contagem_temas.head(3)
    restantes = contagem_temas[3:]

    exemplos_por_tema = {}
    for tema in contagem_temas.index:
        frases = df_relatorio[df_relatorio["Tema identificado"].str.contains(tema, na=False)]["Negative review (PT)"].dropna().unique().tolist()[:2]
        exemplos_por_tema[tema] = frases

    # Gerando o relat√≥rio em Markdown com formata√ß√£o organizada
    relatorio = f"# Relat√≥rio da Unidade/Total\n\n"
    if "Localiza√ß√£o" in df_relatorio.columns and df_relatorio["Localiza√ß√£o"].nunique() == 1:
        relatorio += f"**Localiza√ß√£o:** {df_relatorio['Localiza√ß√£o'].iloc[0]}\n\n"
    relatorio += f"**Per√≠odo:** {', '.join(meses_selecionados)}\n\n"
    
    relatorio += "## Top 3 Temas Mais Recorrentes\n"
    for tema, qtd in top_3.items():
        relatorio += f"- **{tema}**: {qtd} reclama√ß√µes\n"
    
    if not restantes.empty:
        relatorio += "\n## Demais Temas Identificados\n"
        for tema, qtd in restantes.items():
            relatorio += f"- **{tema}**: {qtd} reclama√ß√µes\n"

    relatorio += "\n## Exemplos de Reclama√ß√µes\n"
    for tema, frases in exemplos_por_tema.items():
        if frases:
            relatorio += f"### {tema}\n"
            for frase in frases:
                relatorio += f"- {frase.strip()}\n"
    
    relatorio += "\n## Sugest√µes de Melhoria\n"
    for tema in contagem_temas.index:
        if tema in sugestoes_padrao:
            relatorio += f"### {tema}\n"
            relatorio += f"{sugestoes_padrao[tema]}\n\n"

    st.markdown(relatorio)
    st.download_button("üì• Baixar relat√≥rio como .md", relatorio, file_name="relatorio.md")
