import streamlit as st
import pandas as pd

st.set_page_config(layout="wide")
st.title("üìä An√°lise de Reclama√ß√µes por Unidade")

# üìÅ Carregar os dados da planilha
@st.cache_data
def carregar_dados():
    excel = pd.ExcelFile("Reclamacoes_2025_Traduzido.xlsx")
    df = pd.concat([excel.parse(mes).assign(M√™s=mes) for mes in excel.sheet_names], ignore_index=True)

    # Padronizar colunas
    df.columns = df.columns.str.strip()

    # Verificar e converter datas se coluna existir
    if "Review date" in df.columns:
        df["Review date"] = pd.to_datetime(df["Review date"], errors='coerce')

    if "Negative review (PT)" in df.columns:
        df["Negative review (PT)"] = df["Negative review (PT)"].fillna("").astype(str).str.lower()

    return df

df_all = carregar_dados()

# üìå Dicion√°rio de temas atualizado
temas_keywords = {
    "Limpeza": ["sujo","usado","n√£o estava pronto","cheirava a cigarros","higiene ","sala estava super suja ", "empoeirada", "sem papel", "sujeira", "limpo", "limpeza", "poeira", "imundo", "len√ß√≥is", "toalhas", "cheiro ruim", "odor", "quarto sujo", "cheiro nojento"],
    "Acesso/Check-in": ["porta","passei a noite l√° n√£o", "check-in estava uma bagun√ßa", "n√£o acessei o lugar", "chaves", "n√£o conseguimos entrar.", "trancado", "n√£o consegui entrar", "c√≥digo n√£o funcionou", "problema no acesso", "sem chave", "problema com o c√≥digo", "acesso dif√≠cil", "demora no check-in"],
    "Itens faltando": ["sem papel higi√™nico","sem cabides no guarda -roupa", "n√£o tem um shampoo", " nem um sab√£o", "exceto garfos", "faltando", "n√£o tinha", "sem toalha", "sem sabonete", "sem cobertor", "sem travesseiro", "sem utens√≠lios", "sem itens b√°sicos", "poucos pratos", "faltavam copos"],
    "Atendimento": ["atendimento ruim", "comunicam corretamente","a falta de comunica√ß√£o", "equipe do servi√ßo","n√£o respondam √†s mensagens", "n√£o respondeu", "sem resposta", "demoraram para ajudar", "ningu√©m apareceu", "pessoal in√∫til", "equipe despreparada", "falta de suporte", "comunica√ß√£o ruim", "resposta demorada", "n√£o profissional"],
    "Manuten√ß√£o/Estrutura": ["remoto","a luz no banheiro n√£o funcionava","aquecimento","aquecedor", "inc√™ndio", "t√≠nhamos √°gua", "√°gua quente", "chuveiro quebrado", "chuveiro", "caixa el√©trica", "alarme", "vazamento", "l√¢mpada queimada", "teto rachado", "paredes descascando", "radiador", "aquecimento n√£o funcionou", "equipamento com defeito", "sem luz", "tomada n√£o funciona", "problema estrutural", "estragado", "mofo", "infiltra√ß√£o"],
    "Conforto": ["colch√£o ruim","muito finos", "frio", "cama desconfort√°vel", "muito frio", "muito calor", "barulhento", "sem isolamento", "muito pequeno", "sem ventila√ß√£o", "ambiente gelado", "n√£o tinha aquecedor"],
    "Internet": ["sem wi-fi", "internet ruim","wifi", "wi-fi", "internet", "wi-fi n√£o funcionou", "sem sinal", "conex√£o fraca", "internet lenta", "wi-fi caindo"],
    "Barulho": ["barulho", "ru√≠do", "som alto", "vizinho barulhento", "festa", "gritaria", "incomodado com o barulho"],
    "An√∫ncio incorreto": ["n√£o era como nas fotos", "leva uma hora ", "an√∫ncio enganoso", "fotos diferentes", "expectativa diferente", "propaganda enganosa", "n√£o era o que esperava"],
    "Avalia√ß√£o gen√©rica": ["p√©ssima experi√™ncia", "horr√≠vel", "n√£o recomendo", "decep√ß√£o", "terr√≠vel", "pior estadia", "nada"]
}

def identificar_tema(texto):
    encontrados = [tema for tema, palavras in temas_keywords.items() if any(p in texto for p in palavras)]
    return ", ".join(encontrados) if encontrados else "Outro"

df_all["Tema identificado"] = df_all["Negative review (PT)"].apply(identificar_tema)

# Filtros
meses = sorted(df_all["M√™s"].unique())
meses_selecionados = st.multiselect("Selecionar m√™s(es)", meses, default=meses)

unidades = sorted(df_all[df_all["M√™s"].isin(meses_selecionados)]["Unit"].unique())
unidades_selecionadas = st.multiselect("Selecionar unidade(s)", unidades)

temas_disponiveis = sorted(df_all["Tema identificado"].unique())
temas_escolhidos = st.multiselect("Selecionar tema(s)", temas_disponiveis)

# Aplicar filtros
df_filtrado = df_all[df_all["M√™s"].isin(meses_selecionados)]

if unidades_selecionadas:
    df_filtrado = df_filtrado[df_filtrado["Unit"].isin(unidades_selecionadas)]

if temas_escolhidos:
    df_filtrado = df_filtrado[df_filtrado["Tema identificado"].apply(lambda t: any(tema in t for tema in temas_escolhidos))]

# Remover coment√°rios vazios e notas 8, 9, 10
df_filtrado = df_filtrado[df_filtrado["Negative review (PT)"].str.strip() != ""]
df_filtrado = df_filtrado[~df_filtrado["Review score"].isin([8, 9, 10])]

# Exibir resultado
st.subheader("üìã Reclama√ß√µes detalhadas")

if "Review date" in df_filtrado.columns:
    df_filtrado = df_filtrado.sort_values("Review date")

st.dataframe(
    df_filtrado[["M√™s", "Unit", "Tema identificado", "Negative review (PT)", "Review score"]],
    use_container_width=True
)
